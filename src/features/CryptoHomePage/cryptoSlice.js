import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchTop12CryptoData, fetchSearchCryptoData } from "./cryptoAPI";

const initialState = {
  data: [],
  filterData: [],
};

export const cryptoData = createAsyncThunk(
  "counter/fetchCryptoData",
  async () => {
    const response = await fetchTop12CryptoData();
    // remove duplicates:
    let filterDuplicates = response?.data?.data?.filter(
      (value, index, self) =>
        index === self.findIndex((t) => t.baseId === value.baseId)
    );
    return (response.data = filterDuplicates);
  }
);
export const cryptoSearchData = createAsyncThunk(
  "counter/fetchCryptoSearchData",
  async (name) => {
    const response = await fetchSearchCryptoData(name);
    return response.data;
  }
);
export const counterSlice = createSlice({
  name: "crypto-data",
  initialState,
  reducers: {
    filterData: (state, action) => {
      state.filterData = [action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(cryptoData.pending, (state) => {
        state.status = "loading";
      })
      .addCase(cryptoData.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      })
      .addCase(cryptoSearchData.pending, (state) => {
        state.status = "loading";
      })
      .addCase(cryptoSearchData.fulfilled, (state, action) => {
        state.status = "idle";
        state.filterData = action.payload;
      });
  },
});
export const { filterData } = counterSlice.actions;

export const selectCryptoData = (state) => state.counter.data;
export const selectStatus = (state) => state.counter.status;
export const selectFilterData = (state) => state.counter.filterData;

export const filteredData = (name) => async (dispatch, getState) => {
  const replaceSpacesInName = name.toLowerCase().replaceAll(" ", "-");
  const data = await dispatch(cryptoSearchData(replaceSpacesInName));
  if (data.payload) {
    dispatch(
      filterData(
        data?.payload?.data?.find((l) => l.baseId === replaceSpacesInName)
      )
    );
  }
};

export default counterSlice.reducer;
